package HuffmanCodeImpl;

import java.util.Scanner;

public class HuffmanCode {

    //driver code
    public static void main(String args[]) {
        System.out.println("Enter a string in all lowercase: ");
        Scanner s = new Scanner(System.in);
        String input = sanitizeInput(s.nextLine());

        HashMap<Character, Integer> charFreqMap = buildFreqMap(input);
        System.out.println("Character | Frequency:");
        charFreqMap.display();

        PriorityQueue nodeQueue = charFreqMap.convertToQueue();

        Node root = null;
        while (nodeQueue.size() > 1) {
            Node first = nodeQueue.peekMin();
            nodeQueue.remove();
            Node second = nodeQueue.peekMin();
            nodeQueue.remove();

            Node newParent = new Node();
            newParent.freq = first.freq + second.freq;
            newParent.ch = '~';
            newParent.left = first;
            newParent.right = second;
            root = newParent;
            nodeQueue.insert(newParent);

        }

        HashMap<Character, String> encodedData = new HashMap<>();

        printCode(root, "", encodedData);


        String test = "";


    }

    public static void printCode(Node root, String s, HashMap<Character, String> encodedData) {

        if (root != null) {
            // base case; if the left and right are null
            // then its a leaf node and we print
            // the code s generated by traversing the tree.
            if (root.left == null && root.right == null && root.ch != '~') {

                // c is the character in the node
                System.out.println(root.ch + ":" + s);
                encodedData.put(root.ch, s);

                return;
            }

            // if we go to left then add "0" to the code.
            // if we go to the right add"1" to the code.

            // recursive calls for left and
            // right sub-tree of the generated tree.
            printCode(root.left, s + "0", encodedData);
            printCode(root.right, s + "1", encodedData);
        }
    }

    public static HashMap<Character, Integer> buildFreqMap(String input) {
        HashMap<Character, Integer> charFreqMap = new HashMap<Character, Integer>();
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            Integer val = charFreqMap.get(c);
            if (val != null) {
                charFreqMap.put(c, val + 1);
            } else {
                charFreqMap.put(c, 1);
            }
        }
        return charFreqMap;
    }

    public static String sanitizeInput(String input) {
        StringBuilder inputSanitized = new StringBuilder();
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == 32 || input.charAt(i) >= 65 && input.charAt(i) <= 90 || input.charAt(i) >= 97 && input.charAt(i) <= 122) {
                inputSanitized.append(input.charAt(i));
            }
        }
        return inputSanitized.toString();
    }
}